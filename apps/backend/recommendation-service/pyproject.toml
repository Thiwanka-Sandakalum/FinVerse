# Ruff configuration for code linting and formatting
[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__pycache__",
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "W191", # indentation contains tabs
  "B904", # Allow raising exceptions without from e inside except clauses
]
line-length = 88
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings  
  "F", # pyflakes
  "I", # isort
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
  "ARG001", # unused-function-argument
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID252", # relative-imports
]
target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
ignore-names = ["setUp", "tearDown"]

[tool.ruff.flake8-type-checking]
strict = true

# MyPy configuration for type checking
[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_untyped_defs = false
no_implicit_optional = true
python_version = "3.11"
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Per-module options
[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "lightfm.*",
  "motor.*",
  "scipy.*",
  "numpy.*",
  "httpx.*",
]

# Pytest configuration
[tool.pytest.ini_options]
addopts = "-ra -q --strict-markers --strict-config"
filterwarnings = [
  "error",
  "ignore::UserWarning",
  "ignore::DeprecationWarning",
]
minversion = "7.0"
testpaths = ["tests"]

# Coverage configuration
[tool.coverage.run]
branch = true
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/venv/*",
  "*/migrations/*",
]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"
