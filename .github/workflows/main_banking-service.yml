# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Banking Service API to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/banking-service-api/**'
      - 'packages/**'
      - '.github/workflows/main_banking-service.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: 'apps/backend/banking-service-api/package-lock.json'

      - name: Install dependencies
        working-directory: ./apps/backend/banking-service-api
        run: |
          npm ci

      - name: Build banking service
        working-directory: ./apps/backend/banking-service-api
        run: |
          npm run build

      - name: Generate Prisma client
        working-directory: ./apps/backend/banking-service-api
        run: |
          npx prisma generate

      - name: Prepare deployment package
        run: |
          mkdir -p deployment-package
          
          # Copy built application
          cp -r apps/backend/banking-service-api/dist deployment-package/
          
          # Copy production node_modules (only dependencies, not devDependencies)
          cd apps/backend/banking-service-api
          npm ci --omit=dev --ignore-scripts
          cd ../../..
          cp -r apps/backend/banking-service-api/node_modules deployment-package/
          
          # Copy prisma schema and generated client
          mkdir -p deployment-package/prisma
          cp apps/backend/banking-service-api/prisma/schema.prisma deployment-package/prisma/ || echo "schema.prisma not found"
          
          # Copy entire prisma folder to ensure migrations and client are included
          cp -r apps/backend/banking-service-api/prisma/* deployment-package/prisma/ || echo "Prisma folder copy failed"
          
          # Copy startup script
          cp apps/backend/banking-service-api/startup.sh deployment-package/ || echo "Startup script not found"
          chmod +x deployment-package/startup.sh || echo "Could not make startup script executable"
          
          # Create production package.json
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('apps/backend/banking-service-api/package.json', 'utf8'));
          const prodPkg = {
            name: pkg.name,
            version: pkg.version,
            main: 'dist/index.js',
            scripts: {
              start: 'node dist/index.js',
              'start:production': 'npm run prisma:generate && npm run start',
              'prisma:generate': 'prisma generate'
            },
            dependencies: pkg.dependencies || {},
            prisma: pkg.prisma || {}
          };
          fs.writeFileSync('deployment-package/package.json', JSON.stringify(prodPkg, null, 2));
          "
          
          # Create web.config for Azure Web App
          cat > deployment-package/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="dist/index.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^dist/index.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="dist/index.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
              <iisnode node_env="production" 
                       nodeProcessCountPerApplication="1"
                       maxConcurrentRequestsPerProcess="1024"
                       maxNamedPipeConnectionRetry="3"
                       namedPipeConnectionRetryDelay="2000"
                       asyncCompletionThreadCount="0"
                       initialRequestBufferSize="4096"
                       maxRequestBufferSize="65536"
                       watchedFiles="*.js"
                       uncFileChangesPollingInterval="5000"
                       gracefulShutdownTimeout="60000"
                       loggingEnabled="true"
                       logDirectory="iisnode"
                       debuggingEnabled="false"
                       debugHeaderEnabled="false"
                       debuggerPortRange="5058-6058"
                       debuggerPathSegment="debug"
                       maxLogFileSizeInKB="128"
                       appendToExistingLog="false"
                       logFileFlushInterval="5000"
                       devErrorsEnabled="false"
                       flushResponse="false"
                       enableXFF="false"
                       promoteServerVars="" />
            </system.webServer>
          </configuration>
          EOF
          
          echo 'Deployment package contents:'
          find deployment-package -type f -name '*.js' -o -name '*.json' -o -name '*.prisma' -o -name '*.config' | head -20
          
          echo 'Package size:'
          du -sh deployment-package/
          
          echo 'Verifying main entry point:'
          ls -la deployment-package/dist/index.js || echo "WARNING: Main entry point not found!"
          
          echo 'Verifying package.json:'
          cat deployment-package/package.json

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: banking-service-app
          path: deployment-package/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: banking-service-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7EB4ABFD5A2346B88644896CFCC3DFD3 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_265197E9673746AFB0D39E31AD45143B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_16E0719824B54DF09C76EAEFCDD575D5 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'banking-service'
          slot-name: 'Production'
          package: .
          startup-command: 'npx prisma generate && node dist/index.js'
          